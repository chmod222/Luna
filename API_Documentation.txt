Luna API Doc
------------

Exported types, extendable in corelib.lua:

  - luna.types.channel
  --------------------
    * A channel connected to Lunas internal state.

    Methods (builtin):
      + getChannelInfo() -> channel name, creation time (UNIX stamp)
      + getTopic()       -> topic, set at (UNIX stamp), set by
      + getUserList()    -> array of type luna.types.channel_user
      + findUser(nick)   -> luna.types.channel_user if found, nil if not
      + getModes()       -> {'t' = true, 'b' = { 'ban1', 'ban2' }, 'k' = 'key' }

    Methods (extended):
      + getName()         -> channel name
      + getCreationDate() -> UNIX stamp
      + privmsg(message)  -> Send a message to this channel

    Attributes:
      + name        getName()
      + created     getCreationDate()
      + modes       getModes()
      + topic       getTopic()
      + userlist    getUserList()


  - luna.types.channel_user
  -------------------------
    * An IRC User inside a luna.types.channel.

    Methods (builtin):
      + getUserInfo() -> nick, user, host
      + getStatus()   -> user status in channel, one of "op", "voice", "regular"
      + getChannel()  -> luna.types.channel
      + getModes()    -> example: 'ov' for voice and op

    Methods (extended):
      + getRegUser() -> luna.types.user if found, nil if not
      + respond(msg) -> respond to the user in the channel of the event
      + isMe()       -> true if botnick == usernick
      + getNick()
      + getUser()
      + getHost()
      + notice(msg)  -> send the user a NOTICE
      + privmsg(msg) -> send the user a PRIVMSG
      + ctcp(ctcp, msg)      -> send a ctcp request for 'ctcp' with argument 'msg'
                                e.g. user:ctcp('PING', os.time())
      + ctcpReply(ctcp, msg) -> send a ctcp response for 'ctcp' with argument 'msg'
                                e.g.. user:ctcpReply('VERSION', 'Luna')

    Attributes:
      + nick        getNick()
      + user        getUser()
      + host        getHost()
      + status      getStatus()
      + channel     getChannel()
      + modes       getModes()


  - luna.types.source_user
  ------------------------
    * An unrelated IRC source represented by a nickname, username and hostname.

    Methods (builtin):
      + getUserInfo() -> nick, user, host

    Methods (extended):
      + getRegUser() -> luna.types.user if found, nil if not
      + respond(msg) -> respond to the user in a private message
      + getNick()
      + getUser()
      + getHost()
      + privmsg(msg) -> send a message to this user
      + notice(msg)  -> send a notice to this user
      + ctcp(ctcp, msg)      -> send a ctcp request for 'ctcp' with argument 'msg'
                                e.g. user:ctcp('PING', os.time())
      + ctcpReply(ctcp, msg) -> send a ctcp response for 'ctcp' with argument 'msg'
                                e.g.. user:ctcpReply('VERSION', 'Luna')

    Attributes:
      + nick   getNick()
      + user   getUser()
      + host   getHost()


  - luna.types.user
  -----------------
    * A user within luna (users.txt).

    Methods (builtin):
      + getFlags()
      + setFlags(flags)
      + getLevel()
      + setLevel(level)
      + getId()
      + setId(id)

    Methods (extended):
      + isOperator()    -> true if flags contains 'o'

    Attributes:
      + flags   getFlags()  setFlags()
      + level   getLevel()  setLevel()
      + id      getId()     setId()


  - luna.types.script
  -------------------
    * A (not necessarily loaded) script.

    Methods (builtin):
      + getScriptInfo() -> filename, name, description, author, version
      + isSelf()        -> true if this object represents the current script

    Methods (extended):
      + getFilename()
      + getName()
      + getDescription()
      + getAuthor()
      + getVersion()

    Attributes:
      + file            getFilename()
      + name            getName()
      + description     getDescription()
      + author          getAuthor()
      + version         getVersion()


Exported functions:
  - luna.channels
  ---------------
    * Namespace of functions related to channels.

    Functions (builtin):
      + getChannelList()  -> A list of currently joined luna.types.channel
      + find(channelname) -> luna.types.channel if found, nil if not

    Attributes:
      + channellist     getChannelList()

  - luna.scripts
  --------------
    * Namespace of functions related to scripts.

    Functions (builtin):
      + load(filename)   -> luna.types.script on success, nil on failure
      + unload(filename) -> unloads script, returns nil
      + getScriptList()  -> A list of currently loaded luna.types.script

    Attributes:
      + scriptlist      getScriptList()

  - luna.users
  ------------
    * Namespace of functions related to users.

    Functions (builtin):
      + find(nick, user, host) -> luna.types.user if found, nil if not
      + add(id, mask, flags, lvl) -> adds this user to the list
      + remove(mask)              -> removes user belonging to hostmask
      + save()                    -> save the userlist
      + reload()                  -> reload the userlist
      + getUserList()             -> A list of all known luna.types.user

    Attributes:
      + userlist    getUserList()

  - luna.self
  -----------
    * Functions for runtime information about the bot.

    Functions (builtin):
      + getUserInfo()    -> nick, user, realname
      + getServerInfo()  -> server host, server port
      + getMemoryInfo()  -> bytes in use, allocations, deallocations
      + getRuntimeInfo() -> UNIX stamp when started, UNIX stamp when connected

    Functions (extended):
      + getNick()
      + getUser()
      + getReal()
      + getStarted()
      + getConnected()
      + getMemoryInUse()
      + getMemoryAllocations()
      + getMemoryDeallocations()

    Attributes:
      + nick        getNick()
      + user        getUser()
      + real        getReal()
      + started     getStarted()
      + connected   getConnected()
      + memory      getMemoryInUse()
      + allocs      getMemoryAllocations()
      + deallocs    getMemoryDeallocations()

  - luna
  ------
    * Uncategorized functions, including important API functions.

    Functions (builtin):
      + log(level, msg) -> log a message using a given level
        # where level is one:
          ~ 'info'
          ~ 'warning'
          ~ 'error'

      + sendLine(msg)   -> send a raw line to IRC, returns bytes sent

    Functions (extended):
      + changeNick(newnick)     -> change nickname
      + quit(reason?)           -> quit IRC
      + joinChannel(chan, key?) -> join a channel
      + notice(target, msg)     -> send a notice
      + privmsg(target, msg)    -> send a private message
      + ctcp(target, ctcp, msg)         -> send a CTCP request
      + ctcpReply(target, ctcp, msg)    -> send a CTCP response
      + registerScript(inftab)  -> register your script
        # The info-table must have at least these fields, not empty:
          ~ name
          ~ description
          ~ author
          ~ version

      + addSignal(sig, handler) -> register your script for a signal
      + delSignal(handler)      -> remove this signal handler

Additions to standard library:
  - table
  -------
    Functions:
      + table.copy(table)   -> copy a table

  - string
  --------
    Functions:
      + str:split(sep)      -> string.split('a, b, c', ', ') => {'a', 'b', 'c'}
      + str:colour(fg,bg?)
      + str:bold()
      + str:underline()
      + str:reverse()

      Calls to string formatting functions can be chained, e.g.
        str = 'fancy'
        channel:privmsg(str:bold():underline():color(4, 8))

Signals:
  Signals are dispatched for various IRC events. Scripts can 'subscribe' to
  one or more signals using:

    luna.addSignal(signal, callback)

  where callback is a function accepting zero or more arguments, thus the
  following is idiomatic:

    luna.addSignal(signal, function(...) [...] end)

  Currently implemented signals are:
    * raw
      + source      (luna.types.source_user)
      + command     (string, e.g. 'PRIVMSG' or number, e.g. 367)
      + args        (list of strings)
      + msg         (string or nil)

    * private_message
      + source  (luna.types.source_user)
      + msg     (string)

    * public_message
      + source  (luna.types.channel_user)
      + target  (luna.types.channel)
      + msg     (string)

    * private_ctcp
      + source      (luna.types.source_user)
      + ctcp        (string, e.g. 'VERSION')
      + args        (string or nil)

    * private_ctcp_response
      + source      (luna.types.source_user)
      + ctcp        (string, e.g. 'VERSION')
      + args        (string or nil)

    * public_ctcp
      + source  (luna.types.channel_user)
      + target  (luna.types.channel)
      + ctcp        (string, e.g. 'VERSION')
      + args        (string or nil)

    * public_ctcp_response
      + source  (luna.types.channel_user)
      + target  (luna.types.channel)
      + ctcp    (string, e.g. 'VERSION')
      + args    (string or nil)

    * private_action
      + source  (luna.types.source_user)
      + msg     (string)

    * public_action
      + source  (luna.types.channel_user)
      + target  (luna.types.channel)
      + msg     (string)

    * private_command
      + source  (luna.types.source_user)
      + command (string)
      + args    (string or nil)

    * public_command
      + source  (luna.types.channel_user)
      + target  (luna.types.channel)
      + command (string)
      + args    (string or nil)

    * channel_join
      + source  (luna.types.channel_user)
      + target  (luna.types.channel)

    * connect
        - called after the end of the MOTD has been received. Earlier numerics
          can be caught with signal 'raw'.

    * disconnect
        - called just before internal data is destroyed.

    * ping
        - called on server keepalive ping (can vary).

    * idle
        - called when no data was received in the last 250 milliseconds.

    * channel_part
      + source  (luna.types.channel_user)
      + target  (luna.types.channel)
      + reason  (string or nil)

    * user_quit
      + source  (luna.types.source_user)
      + reason  (string)

    * notice
      + source  (luna.types.source_user)
      + message (string)

    * nick_change
      + source  (luna.types.source_user)
      + newnick (string)

    * invite
      + source  (luna.types.source_user)
      + channel (string)

    * topic_change
      + source      (luna.types.channel_user)
      + target      (luna.types.channel)
      + newtopic    (string)

    * user_kicked
      + source  (luna.types.channel_user)
      + target  (luna.types.channel)
      + kicked  (luna.types.channel_user)
      + reason  (string)

    * script_load
      + script  (luna.types.script)

    * script_unload
      + script  (luna.types.script)
